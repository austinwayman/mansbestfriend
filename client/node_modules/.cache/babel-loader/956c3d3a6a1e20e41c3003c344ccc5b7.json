{"ast":null,"code":"import _defineProperty from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Austin/Desktop/mansbestfriend/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Austin/Desktop/mansbestfriend/client/src/pages/Forum.jsx\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Card from \"../components/PostCards/PostCards\";\nimport Input from \"../components/Input/Input\";\nimport ThreadAddBtn from \"../components/ThreadAddBtn/ThreadAddBtn\";\nimport Jumbotron2 from \"../components/Jumbotron2\";\nimport Nav2 from \"../components/Nav\";\n\nvar Forum =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Forum, _Component);\n\n  function Forum() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forum);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forum)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: [],\n      modal: false,\n      title: \"\",\n      category: \"\",\n      animal: \"\",\n      content: \"\"\n    };\n\n    _this.handleTitleChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleCategoryChange = function (event) {\n      var _event$target2 = event.target,\n          name = _event$target2.name,\n          value = _event$target2.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleAnimalChange = function (event) {\n      var _event$target3 = event.target,\n          name = _event$target3.name,\n          value = _event$target3.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleContentChange = function (event) {\n      var _event$target4 = event.target,\n          name = _event$target4.name,\n          value = _event$target4.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleThreadSubmit = function (event) {\n      event.preventDefault();\n      _this.newPost = {\n        title: _this.state.title,\n        category: _this.state.category,\n        animal: _this.state.animal,\n        content: _this.state.content\n      };\n      API.postThread(_this.newPost).then(function (res) {\n        return _this.getFirstPosts();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.getFirstPosts = function () {\n      API.animalPosts(_this.props.match.params.animal).then(function (result) {\n        return _this.setState({\n          posts: result.data,\n          modal: false\n        });\n      });\n    };\n\n    _this.toggle = function () {\n      _this.setState({\n        modal: !_this.state.modal\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Forum, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getFirstPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Jumbotron2, {\n        page: \"\".concat(this.state.animal, \" Forum\"),\n        secondText: \"Questions asked by users, answered by users\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Nav2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), console.log(this.state.posts), React.createElement(ThreadAddBtn, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Add Thread\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Input, {\n        name: \"title\",\n        value: this.state.title,\n        onChange: this.handleTitleChange,\n        placeholder: \"Title Of Your Thread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(Input, {\n        name: \"category\",\n        value: this.state.category,\n        onChange: this.handleCategoryChange,\n        placeholder: \"Category Of Your Thread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Input, {\n        name: \"animal\",\n        value: this.state.animal,\n        onChange: this.handleAnimalChange,\n        placeholder: \"Type of Animal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(Input, {\n        name: \"content\",\n        value: this.state.content,\n        onChange: this.handleContentChange,\n        placeholder: \"Content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleThreadSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Post Thread\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Cancel\")))), this.state.posts.map(function (post) {\n        return React.createElement(Card, {\n          title: post.title,\n          category: post.category,\n          content: post.content,\n          id: post._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Forum;\n}(Component);\n\nexport default Forum;","map":{"version":3,"sources":["/Users/Austin/Desktop/mansbestfriend/client/src/pages/Forum.jsx"],"names":["React","Component","API","Button","Modal","ModalHeader","ModalBody","ModalFooter","Card","Input","ThreadAddBtn","Jumbotron2","Nav2","Forum","state","posts","modal","title","category","animal","content","handleTitleChange","event","target","name","value","setState","handleCategoryChange","handleAnimalChange","handleContentChange","handleThreadSubmit","preventDefault","newPost","postThread","then","res","getFirstPosts","catch","err","console","log","animalPosts","props","match","params","result","data","toggle","map","post","_id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Card from \"../components/PostCards/PostCards\"\nimport Input from \"../components/Input/Input\"\nimport ThreadAddBtn from \"../components/ThreadAddBtn/ThreadAddBtn\"\nimport Jumbotron2 from \"../components/Jumbotron2\";\nimport Nav2 from \"../components/Nav\";\n\n\nclass Forum extends Component {\n    state = {\n        posts: [],\n        modal: false,\n        title: \"\",\n        category: \"\",\n        animal: \"\",\n        content: \"\"\n    }\n\n    \n    componentWillMount() {\n        this.getFirstPosts()\n    }\n\n    handleTitleChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        }); \n    }\n\n    handleCategoryChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        }); \n    }\n    \n    handleAnimalChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        }); \n    }\n\n    handleContentChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value\n        }); \n    }\n\n    handleThreadSubmit = event => {\n    \n        event.preventDefault();\n\n        this.newPost = {title : this.state.title, \n            category: this.state.category,\n             animal: this.state.animal, \n             content: this.state.content}\n\n        API.postThread(this.newPost)\n          .then(res => this.getFirstPosts())\n          .catch(err => console.log(err));\n      };\n    \n    \n    \n    getFirstPosts = () => {\n        \n        API.animalPosts(this.props.match.params.animal).then(result => this.setState({ posts: result.data, modal:false }));\n        \n    }\n    \n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    render() {\n\n        return (\n\n            <div>\n\n                {/* Start of Jumbotron elements */}\n                <Jumbotron2 page={`${this.state.animal} Forum`} secondText={\"Questions asked by users, answered by users\"}>\n                    <Nav2 />\n                </Jumbotron2>\n                {/* end of Jumbotron Elements */}\n\n\n                {console.log(this.state.posts)}\n              \n                <ThreadAddBtn toggle={this.toggle} />\n\n                <div>\n                    <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                        <ModalHeader>Add Thread</ModalHeader>\n                        <ModalBody>\n                            <Input name=\"title\" value = {this.state.title} onChange = {this.handleTitleChange} placeholder=\"Title Of Your Thread\" />\n                            <Input name=\"category\" value = {this.state.category} onChange = {this.handleCategoryChange} placeholder=\"Category Of Your Thread\" />\n                            <Input name=\"animal\" value = {this.state.animal} onChange = {this.handleAnimalChange} placeholder=\"Type of Animal\" />\n                            <Input name=\"content\" value = {this.state.content} onChange = {this.handleContentChange} placeholder=\"Content\" />\n                           \n                            </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={this.handleThreadSubmit}>Post Thread</Button>{' '}\n                            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n\n\n\n                {\n\n                    this.state.posts.map(post => {\n\n                        return (\n                            <Card title={post.title} category={post.category} content={post.content} id={post._id} />\n                        )\n                    })\n\n                }\n\n            </div>\n\n        )\n\n    }\n\n}\n\nexport default Forum\n"]},"metadata":{},"sourceType":"module"}